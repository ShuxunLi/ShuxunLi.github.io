---
layout:     post
title:      "runtime中的objc_msgSend"
subtitle:   ""
date:       2018-05-08
author:     "李书勋"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - iOS
    - runtime
---

> This document is not completed and will be updated anytime.


## Catagory
1. [objc_msgSend简介](#objc_msgsend简介)  
      * [id](#id)
2. [缓存命中逻辑](#缓存命中逻辑)
3. [lookUpImp](#lookupimp)
      * [lookUpMethodList](#lookupmethodlist)
      * [superClass Caches & methodLists](#superclass-caches--methodlists)
      * [search_method_list](#search_method_list)
      * [findMethodInSortedMethodList](#findMethodInSortedMethodList)
      * [cache_fil ](#cache_fil )
4. [method resolver](#method-resolver)
      * [class_resolveMethod](#class_resolvemethod)
      * [resolveInstanceMethod & resolveClassMethod](#resolveinstancemethod--resolveclassmethod)
      * [lookUpImpOrNil](#lookupimpornil)
      * [小结](#小结)
5. [Forward](#forward)
6. [Summary](#summary)
      
---

## objc_msgSend简介

> 学习runtime, 第一个认识的函数一定会是`objc_msgSend(receiver, selector)`. 毕竟`objc_msgSend` 函数支撑了我们使用 Objective-C 实现的一切。

`objc_msgSend`函数被定义在 objc/message.h 文件中，其函数原型如下

```objc
OBJC_EXPORT id _Nullable
objc_msgSend(id _Nullable self, SEL _Nonnull op, ...)
OBJC_AVAILABLE(10.0, 2.0, 9.0, 1.0, 2.0);
```

- ### id

```objc
  typedef struct objc_object *id;
```
 [objc_obect]() [SEL]()已有文章解释，在这里不在赘述。
 
---

## 缓存命中逻辑

>我们开始浏览  `objc_msgSend`的源码， 来自于 objc-msg-win32.m文件中。

``` objc
OBJC_EXPORT __declspec(naked) id objc_msgSend(id a, SEL b, ...)
{
__asm {
push ebp
mov ebp, esp

// load receiver and selector
mov ecx, SELECTOR
mov eax, SELF

// check whether receiver is nil
test eax, eax
je NIL

// receiver (in eax) is non-nil: search the cache
mov edx, isa[eax]

// CacheLookup WORD_RETURN, MSG_SEND
push edi
mov edi, cache[edx]
push esi
mov esi, mask[edi]
mov edx, ecx
shr edx, 2
SCAN:
and edx, esi
mov eax, buckets[edi][edx*4]
test eax, eax
je MISS
cmp ecx, method_name[eax]
je HIT
add edx, 1
jmp SCAN

HIT:
mov eax, method_imp[eax]
pop esi
pop edi
mov edx, kFwdMsgSend
leave
jmp eax

// cache miss: search method lists
MISS:
pop esi
pop edi
mov edx, SELF
mov eax, isa[edx]

// MethodTableLookup WORD_RETURN, MSG_SEND
push eax
push ecx
push edx
call _class_lookupMethodAndLoadCache3

mov edx, kFwdMsgSend
leave
jmp eax

// message send to nil: return zero
NIL:
// eax is already zero
mov edx, 0
leave
ret
}
}

```
Apple 为了性能的原因，使用了汇编语言。 本人对于汇编一知半解，不过Apple 加了大量的注释， 可以帮助我们一窥真面目。下图为简单的理解图， 汇编知识有限， 哪里有错， 欢迎大家指正。

![汇编语言理解图](http://chuantu.biz/t6/307/1525859515x-1404793106.png)

---

##  lookUpImp

`_class_lookupMethodAndLoadCache3` 的实质函数是`lookUpImpOrForward`.  我们浏览源码发现，  其实就是先寻找自身的`methodList`, 如果没有找到， 那就用自己的超类去寻找，使用`superClass`是寻找了`cache`,然后再去找`methodLists`.只是`cache_getImp`并没有开源，我们不能得知具体实现， 但是我推测 和上述逻辑有类似的地方。

以下是`lookUpImpOrForward`的核心代码:

- ### lookUpMethodList
 
 ```objc
  // 上面code有一段纠错措施， 如果cache(bool)为 YES, 会重新查询一次cache。
 // Try this class's method lists.
 {
 Method meth = getMethodNoSuper_nolock(cls, sel);
 if (meth) {
 log_and_fill_cache(cls, meth->imp, sel, inst, cls);
 imp = meth->imp;
 goto done;
 }
 }
 ```
 
 - ### superClass Caches & methodLists
 
 ```objc
 
 // Try superclass caches and method lists.
 {
 unsigned attempts = unreasonableClassCount();
 for (Class curClass = cls->superclass;
 curClass != nil;
 curClass = curClass->superclass)
 {
 // Halt if there is a cycle in the superclass chain.
 if (--attempts == 0) {
 _objc_fatal("Memory corruption in class list.");
 }
 
 // Superclass cache.
 imp = cache_getImp(curClass, sel);
 if (imp) {
 if (imp != (IMP)_objc_msgForward_impcache) {
 // Found the method in a superclass. Cache it in this class.
 log_and_fill_cache(cls, imp, sel, inst, curClass);
 goto done;
 }
 else {
 // Found a forward:: entry in a superclass.
 // Stop searching, but don't cache yet; call method 
 // resolver for this class first.
 break;
 }
 }
 
 // Superclass method list.
 Method meth = getMethodNoSuper_nolock(curClass, sel);
 if (meth) {
 log_and_fill_cache(cls, meth->imp, sel, inst, curClass);
 imp = meth->imp;
 goto done;
 }
 }
 }

 ```
 
方法`static method_t * getMethodNoSuper_nolock(Class cls, SEL sel)`， 观察方法名可以得出他会返回给我们一个 `method_t *`的结构体的指针地址。这里逻辑比较简单，就是遍历，然后查询 methodList.`methods`是一个二维数组。
 ``` objc
 static method_t *
 getMethodNoSuper_nolock(Class cls, SEL sel)
 {
 runtimeLock.assertLocked();
 
 assert(cls->isRealized());
 // fixme nil cls? 
 // fixme nil sel?
 for (auto mlists = cls->data()->methods.beginLists(), 
 end = cls->data()->methods.endLists(); 
 mlists != end;
 ++mlists)
 {
 method_t *m = search_method_list(*mlists, sel);
 if (m) return m;
 }
 return nil;
 }
 ```
 
 - ### search_method_list
 
 `search_method_list`方法中 `__builtin_expect(a,b)`是一个宏定义， 但是不知道为什么展示的这个颜色？所以这里有疑问。
 

 ```objc
 define __builtin_expect(P1,P2) P1
 
 static method_t *search_method_list(const method_list_t *mlist, SEL sel)
 {
 int methodListIsFixedUp = mlist->isFixedUp();
 int methodListHasExpectedSize = mlist->entsize() == sizeof(method_t);
 
 if (__builtin_expect(methodListIsFixedUp && methodListHasExpectedSize, 1)) {
 return findMethodInSortedMethodList(sel, mlist);
 } else {
 // Linear search of unsorted method list
 for (auto& meth : *mlist) {
 if (meth.name == sel) return &meth;
 }
 }
 return nil;
 }
 ```
 - ### findMethodInSortedMethodList
 
 `findMethodInSortedMethodList`是对方法列表进行依次检查。这里使用了`>>`右移操作符。
 
 ``` objc
 
 static method_t *findMethodInSortedMethodList(SEL key, const method_list_t *list)
 {
 assert(list);
 
 const method_t * const first = &list->first;
 const method_t *base = first;
 const method_t *probe;
 uintptr_t keyValue = (uintptr_t)key;
 uint32_t count;
 
 for (count = list->count; count != 0; count >>= 1) {
 probe = base + (count >> 1);
 
 uintptr_t probeValue = (uintptr_t)probe->name;
 
 if (keyValue == probeValue) {
 // `probe` is a match.
 // Rewind looking for the *first* occurrence of this value.
 // This is required for correct category overrides.
 while (probe > first && keyValue == (uintptr_t)probe[-1].name) {
 probe--;
 }
 return (method_t *)probe;
 }
 
 if (keyValue > probeValue) {
 base = probe + 1;
 count--;
 }
 }
 
 return nil;
 }
 
 ```
 
- ### cache_fil 
 `cache_fill()`向下会转化为`cache_fill_nolock`方法。 我们发现注释给出一个信息是**缓存中的内容大于容量的 3/4 就会扩充缓存，大小翻倍** 
 
 核心代码其实就是 `bucket->set(key, imp);`.
 
 ```objc
 static void cache_fill_nolock(Class cls, SEL sel, IMP imp, id receiver)
 {
 cacheUpdateLock.assertLocked();
 
 // Never cache before +initialize is done
 if (!cls->isInitialized()) return;
 
 // Make sure the entry wasn't added to the cache by some other thread 
 // before we grabbed the cacheUpdateLock.
 if (cache_getImp(cls, sel)) return;
 
 cache_t *cache = getCache(cls);
 cache_key_t key = getKey(sel);
 
 // Use the cache as-is if it is less than 3/4 full
 mask_t newOccupied = cache->occupied() + 1;
 mask_t capacity = cache->capacity();
 if (cache->isConstantEmptyCache()) {
 // Cache is read-only. Replace it.
 cache->reallocate(capacity, capacity ?: INIT_CACHE_SIZE);
 }
 else if (newOccupied <= capacity / 4 * 3) {
 // Cache is less than 3/4 full. Use it as-is.
 }
 else {
 // Cache is too full. Expand it.
 cache->expand();
 }
 
 // Scan for the first unused slot and insert there.
 // There is guaranteed to be an empty slot because the 
 // minimum size is 4 and we resized at 3/4 full.
 bucket_t *bucket = cache->find(key, receiver);
 if (bucket->key() == 0) cache->incrementOccupied();
 bucket->set(key, imp);
 }
```

---

## method resolver

>  当我们第一次在当前`class`和`superclass`都没有找到实现，就会进入到`method resolver`.

- ### class_resolveMethod

```objc 
void _class_resolveMethod(Class cls, SEL sel, id inst)
{
if (! cls->isMetaClass()) {
// try [cls resolveInstanceMethod:sel]
_class_resolveInstanceMethod(cls, sel, inst);
} 
else {
// try [nonMetaClass resolveClassMethod:sel]
// and [cls resolveInstanceMethod:sel]
_class_resolveClassMethod(cls, sel, inst);
if (!lookUpImpOrNil(cls, sel, inst, 
NO/*initialize*/, YES/*cache*/, NO/*resolver*/)) 
{
_class_resolveInstanceMethod(cls, sel, inst);
}
}
}
```
  这个方法首先判断当前类是否为`Meta-class`, 如果不是，就执行`_class_resolveInstanceMethod`方法； 如果是， 就执行`_class_resolveClassMethod`。
 
 - ### resolveInstanceMethod & resolveClassMethod
 
 ```objc
 static void _class_resolveInstanceMethod(Class cls, SEL sel, id inst)
 {
 if (! lookUpImpOrNil(cls->ISA(), SEL_resolveInstanceMethod, cls, 
 NO/*initialize*/, YES/*cache*/, NO/*resolver*/)) 
 {
 // Resolver not implemented.
 return;
 }
 
 BOOL (*msg)(Class, SEL, SEL) = (typeof(msg))objc_msgSend;
 bool resolved = msg(cls, SEL_resolveInstanceMethod, sel);
 
 // Cache the result (good or bad) so the resolver doesn't fire next time.
 // +resolveInstanceMethod adds to self a.k.a. cls
 IMP imp = lookUpImpOrNil(cls, sel, inst, 
 NO/*initialize*/, YES/*cache*/, NO/*resolver*/);
 }

static void _class_resolveClassMethod(Class cls, SEL sel, id inst)
{
assert(cls->isMetaClass());

if (! lookUpImpOrNil(cls, SEL_resolveClassMethod, inst, 
NO/*initialize*/, YES/*cache*/, NO/*resolver*/)) 
{
// Resolver not implemented.
return;
}

BOOL (*msg)(Class, SEL, SEL) = (typeof(msg))objc_msgSend;
bool resolved = msg(_class_getNonMetaClass(cls, inst), 
SEL_resolveClassMethod, sel);

// Cache the result (good or bad) so the resolver doesn't fire next time.
// +resolveClassMethod adds to self->ISA() a.k.a. cls
IMP imp = lookUpImpOrNil(cls, sel, inst, 
NO/*initialize*/, YES/*cache*/, NO/*resolver*/);

}

 ```
 两个方法的代码很类似，功能很类似。就是判断当前类是否实现了 `resolveInstanceMethod:` 或者`resolveClassMethod:`方法，如果实现了，就用  `objc_msgSend`执行上述方法， 然后**重新执行查找方法实现的流程**。
 
 - ###  lookUpImpOrNil
 
 ``` objc
 IMP lookUpImpOrNil(Class cls, SEL sel, id inst, 
 bool initialize, bool cache, bool resolver)
 {
 IMP imp = lookUpImpOrForward(cls, sel, inst, initialize, cache, resolver);
 if (imp == _objc_msgForward_impcache) return nil;
 else return imp;
 }
```
 在这个函数实现中，还会去调用`lookUpImpOrForward`去查找有没有传入的`SEL`的实现，但是返回值还会返回`nil`.  `_objc_msgForward_impcache`是一个标记，这个标记用来表示在父类的缓存中停止继续查找。
 
 -  ### 小结
     ![查询逻辑](http://chuantu.biz/t6/308/1525941462x-1404793106.png)
     
---
     
 ## Forward
 
 > 在缓存、当前类、父类以及 `resolveInstanceMethod:` 都没有查找到实现的问题时，就回进行方法转发阶段。
 
 ``` objc
 imp = (IMP)_objc_msgForward_impcache;
 cache_fill(cls, sel, imp, inst);
```
 
进入转发阶段，会调用`id _objc_msgForward(id self, SEL _cmd,…)`方法, 具体代码可以在`objc-msg-arm`、`objc-msg-arm64` 文件中。 由于全是汇编语言， 只能拾人牙慧，参考他人高见。
 
 [Objective-C 消息发送与转发机制原理](http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/#forwarding-%E4%B8%AD%E8%B7%AF%E6%BC%AB%E6%BC%AB%E7%9A%84%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91)    
 [Hmmm, What’s that Selector?](http://www.arigrant.com/blog/2013/12/13/a-selector-left-unhandled)
 
 ---
 
 ## Summary

 ![消息发送与转发路径流程图](http://chuantu.biz/t6/308/1525942813x-1404793106.jpg)
 
---
