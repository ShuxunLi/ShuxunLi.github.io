---
layout:     post
title:      "分治思想"
subtitle:   ""
date:       2018-05-29
author:     "李书勋"
header-img: "img/post-bg-universe.jpg"
tags:
    - 算法
    - 快排
    
---

## Catagory
1. [分治](#分治)
2. [适用条件](#适用条件)
3. [分治下比较经典的应用](#分治下比较经典的应用)
    * [快排](#快排)
       * [空间复杂度](#空间复杂度)
       * [空间复杂度](#空间复杂度)
       * [swift代码实现](#swift代码实现)
    * [海量数据处理](#海量数据处理)
       * [处理方式](#处理方式)
       * [最小堆思想](#最小堆思想)
       
---


## 分治
   > 分治，字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。
   
---

## 适用条件
采用分治法解决的问题一般具有的特征如下：
1. 问题的规模缩小到一定的规模就可以较容易地解决。
2. 问题可以分解为若干个规模较小的模式相同的子问题，即该问题具有最优子结构性质。
3. 合并问题分解出的子问题的解可以得到问题的解。
4. 问题所分解出的各个子问题之间是独立的，即子问题之间不存在公共的子问题。

   ---
   
## 分治下比较经典的应用

  
### 快排
  
  > 快排就是把一个序列分割为两个子序列，等到分割到最后，子序列为一个或者0个单位时， 排序完成。
  
  - #### 时间复杂度
   ![简单的时间复杂度](http://chuantu.biz/t6/321/1527577798x-1566638189.png)
   更精确地说，对于输入顺序之所有排列情形的平均比较次数，可以借由解出这个递归关系式可以精确地算出来。
   ![准确的时间复杂度](http://chuantu.biz/t6/321/1527577847x-1566638189.png)
   
 - #### 空间复杂度
   
   在它的任何递归调用前需要使用 {\displaystyle O(n)} {\displaystyle O(n)}空间。在最好的情况下，它的空间仍然限制在 **O(n)**，因为递归的每一阶中，使用与上一次所使用最多空间的一半，且
   
   ![最好时间复杂度](http://chuantu.biz/t6/321/1527578275x-1566638189.png)
   它的最坏情况是很恐怖的，需要
   
  ![最坏时间复杂度](http://chuantu.biz/t6/321/1527578291x-1566638189.png)
   空间，远比数列本身还多
 
 - #### swift代码实现
 
 ![code](http://chuantu.biz/t6/321/1527578602x-1566638189.png)

 [更多信息科参考wiki](https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F)




### 海量数据处理

>例如：10亿个数中找出最大的10000个数（top K问题）

- #### 处理方式

将1亿个数据分成100份，每份100万个数据，找到每份数据中最大的10000个，最后在剩下的100 X 10000个数据里面找出最大的10000个。如果100万数据选择足够理想，那么可以过滤掉1亿数据里面99%的数据。100万个数据里面查找最大的10000个数据的方法如下：用快速排序的方法，将数据分为2堆，如果大的那堆个数N大于10000个，继续对大堆快速排序一次分成2堆，如果大的那堆个数N大于10000个，继续对大堆快速排序一次分成2堆，如果大堆个数N小于10000个，就在小的那堆里面快速排序一次，找第10000-n大的数字；递归以上过程，就可以找到第1w大的数。参考上面的找出第1w大数字，就可以类似的方法找到前10000大数字了。此种方法需要每次的内存空间为10^6*4=4MB，一共需要101次这样的比较。

**需要注意的是**
 **分治法并不是最优解， 最小堆会更好**

- #### 最小堆思想

将 巨量的 数据， 先取出 K（具体需要的数目）个，做最小（大）堆，然后一次对比堆中的堆顶，如果大于（小于）堆顶， 替换堆顶，并进行整理成最小（大）堆。 遍历完， 堆就是我们需要的K个数。


---


